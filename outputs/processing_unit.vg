/////////////////////////////////////////////////////////////
// Created by: Synopsys DC Expert(TM) in wire load mode
// Version   : O-2018.06
// Date      : Sat Nov 30 21:38:03 2019
/////////////////////////////////////////////////////////////


module controller ( clock, reset, start, input_ready, zero_flag, width_index, 
        height_index, down_counter_reset, down_counter_enable, 
        FSM_selector_reset, FSM_selector_enable, PE_reset, PE_enable, PE_init, 
        index_reset, index_enable, partial_sum_reset, partial_sum_enable, 
        output_valid, input_req, done );
  input [1:0] width_index;
  input [1:0] height_index;
  input clock, reset, start, input_ready, zero_flag;
  output down_counter_reset, down_counter_enable, FSM_selector_reset,
         FSM_selector_enable, PE_reset, PE_enable, PE_init, index_reset,
         index_enable, partial_sum_reset, partial_sum_enable, output_valid,
         input_req, done;
  wire   N68, n3, n9, net3516, net3650, net3649, net3668, net3836, net3834,
         net4002, net4165, net4256, net4255, net4321, n1, n5, n6, n7, n8, n10,
         n11, n12, n16, n17, n22, n23, n24, n25, n26, n27, n28, n29, n30;
  wire   [2:0] state;
  assign PE_enable = net3668;
  assign FSM_selector_enable = net3836;

  dffscs2 \state_reg[2]  ( .DIN(down_counter_reset), .SETB(n23), .CLRB(n17), 
        .CLK(clock), .Q(state[2]), .QN(net3516) );
  dffscs2 \state_reg[0]  ( .DIN(n16), .SETB(n26), .CLRB(n17), .CLK(clock), .Q(
        state[0]), .QN(n3) );
  dffs2 \state_reg[1]  ( .DIN(N68), .CLK(clock), .Q(net4255), .QN(net3649) );
  i1s1 U3 ( .DIN(n30), .Q(down_counter_reset) );
  and2s2 U4 ( .DIN1(n6), .DIN2(net3650), .Q(n1) );
  ib1s1 U5 ( .DIN(n8), .Q(n12) );
  nor2s1 U6 ( .DIN1(n10), .DIN2(net3516), .Q(down_counter_enable) );
  and2s2 U7 ( .DIN1(state[2]), .DIN2(n7), .Q(partial_sum_enable) );
  i1s1 U8 ( .DIN(n1), .Q(n5) );
  i1s1 U9 ( .DIN(state[0]), .Q(n6) );
  i1s1 U10 ( .DIN(n27), .Q(n7) );
  i1s3 U11 ( .DIN(n29), .Q(PE_reset) );
  and2s1 U12 ( .DIN1(state[0]), .DIN2(net3649), .Q(n8) );
  i1s3 U13 ( .DIN(net4255), .Q(n11) );
  nor2s2 U14 ( .DIN1(net3516), .DIN2(n10), .Q(net3668) );
  nnd2s2 U15 ( .DIN1(n11), .DIN2(n3), .Q(n10) );
  nor2s1 U16 ( .DIN1(n3), .DIN2(n11), .Q(net4002) );
  and2s1 U17 ( .DIN1(n6), .DIN2(net4256), .Q(net4165) );
  hi1s1 U18 ( .DIN(net4255), .Q(net4256) );
  i1s1 U19 ( .DIN(net4256), .Q(net3650) );
  i1s8 U20 ( .DIN(n30), .Q(PE_init) );
  hnb1s1 U21 ( .DIN(state[0]), .Q(net4321) );
  ib1s1 U22 ( .DIN(n29), .Q(partial_sum_reset) );
  and2s2 U23 ( .DIN1(n1), .DIN2(state[2]), .Q(index_enable) );
  and2s1 U24 ( .DIN1(n7), .DIN2(net3516), .Q(index_reset) );
  nnd2s3 U25 ( .DIN1(state[0]), .DIN2(net3649), .Q(n27) );
  nnd2s2 U26 ( .DIN1(net4002), .DIN2(net3516), .Q(n30) );
  ib1s1 U27 ( .DIN(net3834), .Q(net3836) );
  ib1s1 U28 ( .DIN(n9), .Q(n24) );
  ib1s1 U29 ( .DIN(down_counter_enable), .Q(net3834) );
  nb1s1 U30 ( .DIN(partial_sum_enable), .Q(output_valid) );
  nnd4s1 U31 ( .DIN1(width_index[1]), .DIN2(width_index[0]), .DIN3(
        height_index[1]), .DIN4(height_index[0]), .Q(n9) );
  hi1s1 U32 ( .DIN(n30), .Q(FSM_selector_reset) );
  and2s1 U33 ( .DIN1(n1), .DIN2(net3516), .Q(input_req) );
  and2s1 U34 ( .DIN1(net4002), .DIN2(state[2]), .Q(done) );
  ib1s1 U35 ( .DIN(n25), .Q(n16) );
  ib1s1 U36 ( .DIN(reset), .Q(n17) );
  aoi23s1 U37 ( .DIN3(start), .DIN4(net3516), .DIN5(net4165), .DIN1(
        input_ready), .DIN2(input_req), .Q(n26) );
  nnd2s3 U38 ( .DIN1(n28), .DIN2(net3516), .Q(n29) );
  aoi22s1 U39 ( .DIN1(index_enable), .DIN2(n24), .DIN3(zero_flag), .DIN4(
        down_counter_enable), .Q(n25) );
  oai21s1 U40 ( .DIN1(n9), .DIN2(net4321), .DIN3(net3650), .Q(n22) );
  aoi21s1 U41 ( .DIN1(n5), .DIN2(n12), .DIN3(reset), .Q(N68) );
  i1s3 U42 ( .DIN(n27), .Q(n28) );
  nnd2s2 U43 ( .DIN1(state[2]), .DIN2(n22), .Q(n23) );
endmodule


module down_counter ( clock, reset, enable, count_init, zero );
  input [5:0] count_init;
  input clock, reset, enable;
  output zero;
  wire   N6, N7, N8, N9, N10, n2, n3, n4, n5, n7, n9, n10, n11, n12, n13, n14,
         n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n1, n6, n8, n25,
         n26, n27, n28, n29, n30, n31, n32, n33, n34, n35;
  wire   [5:0] Count;

  nnd2s2 U16 ( .DIN1(n35), .DIN2(n17), .Q(n10) );
  dffs1 \Count_reg[5]  ( .DIN(n23), .CLK(clock), .Q(Count[5]), .QN(n2) );
  dffs1 \Count_reg[4]  ( .DIN(n22), .CLK(clock), .Q(Count[4]), .QN(n3) );
  dffs1 \Count_reg[2]  ( .DIN(n20), .CLK(clock), .Q(Count[2]), .QN(n5) );
  dffs1 \Count_reg[3]  ( .DIN(n21), .CLK(clock), .Q(Count[3]), .QN(n4) );
  dffs1 \Count_reg[0]  ( .DIN(n24), .CLK(clock), .Q(Count[0]), .QN(n7) );
  dffs1 \Count_reg[1]  ( .DIN(n19), .CLK(clock), .Q(Count[1]), .QN(n30) );
  i1s3 U3 ( .DIN(reset), .Q(n35) );
  nor2s2 U4 ( .DIN1(n32), .DIN2(Count[3]), .Q(n28) );
  ib1s1 U5 ( .DIN(n27), .Q(n32) );
  aoi22s3 U6 ( .DIN1(N10), .DIN2(n34), .DIN3(count_init[5]), .DIN4(reset), .Q(
        n15) );
  xor2s2 U7 ( .DIN1(Count[5]), .DIN2(n29), .Q(N10) );
  oai21s3 U8 ( .DIN1(n10), .DIN2(n30), .DIN3(n11), .Q(n19) );
  and2s2 U9 ( .DIN1(n8), .DIN2(n25), .Q(n11) );
  nnd2s2 U10 ( .DIN1(N6), .DIN2(n34), .Q(n8) );
  i1s3 U11 ( .DIN(n17), .Q(n34) );
  nnd2s2 U12 ( .DIN1(n1), .DIN2(Count[5]), .Q(n6) );
  nnd2s2 U13 ( .DIN1(n15), .DIN2(n6), .Q(n23) );
  ib1s1 U14 ( .DIN(n10), .Q(n1) );
  nor2s2 U15 ( .DIN1(Count[1]), .DIN2(Count[0]), .Q(n26) );
  nnd2s1 U17 ( .DIN1(reset), .DIN2(count_init[1]), .Q(n25) );
  nnd3s2 U18 ( .DIN1(n35), .DIN2(n9), .DIN3(enable), .Q(n17) );
  oai21s2 U19 ( .DIN1(n10), .DIN2(n4), .DIN3(n13), .Q(n21) );
  oai21s2 U20 ( .DIN1(n10), .DIN2(n5), .DIN3(n12), .Q(n20) );
  oai21s2 U21 ( .DIN1(n10), .DIN2(n7), .DIN3(n16), .Q(n24) );
  ib1s1 U22 ( .DIN(n9), .Q(zero) );
  ib1s1 U23 ( .DIN(n28), .Q(n33) );
  i1s1 U24 ( .DIN(n26), .Q(n31) );
  nnd4s1 U25 ( .DIN1(n30), .DIN2(n5), .DIN3(n7), .DIN4(n18), .Q(n9) );
  and3s1 U26 ( .DIN1(n3), .DIN2(n2), .DIN3(n4), .Q(n18) );
  oai21s2 U27 ( .DIN1(n10), .DIN2(n3), .DIN3(n14), .Q(n22) );
  aoi22s1 U28 ( .DIN1(N9), .DIN2(n34), .DIN3(count_init[4]), .DIN4(reset), .Q(
        n14) );
  aoi22s1 U29 ( .DIN1(N8), .DIN2(n34), .DIN3(count_init[3]), .DIN4(reset), .Q(
        n13) );
  aoi22s1 U30 ( .DIN1(N7), .DIN2(n34), .DIN3(count_init[2]), .DIN4(reset), .Q(
        n12) );
  aoi22s1 U31 ( .DIN1(n7), .DIN2(n34), .DIN3(count_init[0]), .DIN4(reset), .Q(
        n16) );
  oai21s1 U32 ( .DIN1(n7), .DIN2(n30), .DIN3(n31), .Q(N6) );
  nor2s1 U33 ( .DIN1(n31), .DIN2(Count[2]), .Q(n27) );
  oai21s1 U34 ( .DIN1(n26), .DIN2(n5), .DIN3(n32), .Q(N7) );
  oai21s1 U35 ( .DIN1(n27), .DIN2(n4), .DIN3(n33), .Q(N8) );
  xor2s1 U36 ( .DIN1(Count[4]), .DIN2(n28), .Q(N9) );
  nor2s1 U37 ( .DIN1(Count[4]), .DIN2(n33), .Q(n29) );
endmodule


module FSM_selector ( clock, reset, enable, selector, zero_select );
  output [2:0] selector;
  input clock, reset, enable;
  output zero_select;
  wire   n3, n10, n11, n12, n13, n14, n18, n19, n20, n21, n22, n23, n8, n9,
         n15, n16, n17, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34,
         n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46;
  wire   [5:0] count;

  dffs2 \count_reg[0]  ( .DIN(n23), .CLK(clock), .Q(count[0]), .QN(n14) );
  dffs2 \count_reg[1]  ( .DIN(n22), .CLK(clock), .QN(n13) );
  dffs2 \count_reg[2]  ( .DIN(n21), .CLK(clock), .Q(count[2]), .QN(n12) );
  dffs2 \count_reg[3]  ( .DIN(n20), .CLK(clock), .Q(count[3]), .QN(n11) );
  dffs2 \count_reg[4]  ( .DIN(n19), .CLK(clock), .QN(n10) );
  dffs2 \count_reg[5]  ( .DIN(n18), .CLK(clock), .QN(n3) );
  ib1s1 U3 ( .DIN(1'b0), .Q(selector[2]) );
  ib1s1 U5 ( .DIN(1'b1), .Q(selector[1]) );
  ib1s1 U7 ( .DIN(1'b0), .Q(selector[0]) );
  nb1s1 U9 ( .DIN(n3), .Q(n15) );
  or2s1 U10 ( .DIN1(n45), .DIN2(n38), .Q(n8) );
  nnd2s2 U11 ( .DIN1(n8), .DIN2(n37), .Q(n19) );
  nnd2s1 U12 ( .DIN1(n43), .DIN2(n36), .Q(n37) );
  xnr2s2 U13 ( .DIN1(n41), .DIN2(n17), .Q(n46) );
  nnd2s1 U14 ( .DIN1(n43), .DIN2(n42), .Q(n44) );
  or2s1 U15 ( .DIN1(n29), .DIN2(n45), .Q(n9) );
  nnd2s2 U16 ( .DIN1(n9), .DIN2(n28), .Q(n22) );
  nb1s1 U17 ( .DIN(n15), .Q(n16) );
  nnd2s1 U18 ( .DIN1(n43), .DIN2(n27), .Q(n28) );
  xor2s1 U21 ( .DIN1(n39), .DIN2(n36), .Q(n38) );
  ib1s1 U22 ( .DIN(n39), .Q(n40) );
  ib1s1 U23 ( .DIN(n17), .Q(n42) );
  xor2s1 U24 ( .DIN1(n35), .DIN2(count[3]), .Q(n34) );
  xnr2s1 U25 ( .DIN1(count[0]), .DIN2(n27), .Q(n29) );
  nb1s1 U26 ( .DIN(n16), .Q(n17) );
  or2s1 U27 ( .DIN1(n12), .DIN2(n32), .Q(n35) );
  or2s1 U28 ( .DIN1(n11), .DIN2(n35), .Q(n39) );
  hi1s1 U29 ( .DIN(n10), .Q(n36) );
  i1s1 U30 ( .DIN(n13), .Q(n27) );
  or2s1 U31 ( .DIN1(n45), .DIN2(n31), .Q(n24) );
  nnd2s2 U32 ( .DIN1(n24), .DIN2(n30), .Q(n21) );
  nnd2s3 U33 ( .DIN1(enable), .DIN2(n25), .Q(n45) );
  nnd2s1 U34 ( .DIN1(n43), .DIN2(count[2]), .Q(n30) );
  nnd2s2 U35 ( .DIN1(n45), .DIN2(n25), .Q(n26) );
  oai22s1 U36 ( .DIN1(count[0]), .DIN2(n45), .DIN3(n14), .DIN4(n26), .Q(n23)
         );
  xor2s1 U37 ( .DIN1(n32), .DIN2(count[2]), .Q(n31) );
  nor6s3 U38 ( .DIN1(n10), .DIN2(n12), .DIN3(n11), .DIN4(n3), .DIN5(n13), 
        .DIN6(n14), .Q(zero_select) );
  ib1s2 U39 ( .DIN(reset), .Q(n25) );
  ib1s2 U40 ( .DIN(n26), .Q(n43) );
  nnd2s2 U41 ( .DIN1(n27), .DIN2(count[0]), .Q(n32) );
  nnd2s2 U42 ( .DIN1(n43), .DIN2(count[3]), .Q(n33) );
  oai21s2 U43 ( .DIN1(n45), .DIN2(n34), .DIN3(n33), .Q(n20) );
  nnd2s2 U44 ( .DIN1(n36), .DIN2(n40), .Q(n41) );
  oai21s2 U45 ( .DIN1(n46), .DIN2(n45), .DIN3(n44), .Q(n18) );
endmodule


module counter_3 ( clock, reset, enable, init, bit_in, init_val, count );
  input [5:0] init_val;
  output [5:0] count;
  input clock, reset, enable, init, bit_in;
  wire   net3449, net3450, net3461, net3463, net3473, net3478, net3481,
         net3482, net4249, net4333, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
         n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38,
         n39, n40, n41, n42, n43, n44, n45, n46;

  dffs1 \count_reg[2]  ( .DIN(n45), .CLK(clock), .Q(count[2]), .QN(n31) );
  dffs1 \count_reg[3]  ( .DIN(n5), .CLK(clock), .Q(count[3]), .QN(n30) );
  dffs1 \count_reg[5]  ( .DIN(n24), .CLK(clock), .Q(count[5]), .QN(n2) );
  dffs1 \count_reg[4]  ( .DIN(n16), .CLK(clock), .Q(count[4]) );
  dffs1 \count_reg[0]  ( .DIN(n46), .CLK(clock), .Q(count[0]), .QN(n3) );
  dffs1 \count_reg[1]  ( .DIN(n4), .CLK(clock), .Q(count[1]), .QN(n1) );
  nnd2s1 U3 ( .DIN1(n7), .DIN2(n11), .Q(net3482) );
  nor3s2 U4 ( .DIN1(n30), .DIN2(n31), .DIN3(net3473), .Q(n29) );
  nnd2s2 U5 ( .DIN1(net3463), .DIN2(n30), .Q(n39) );
  ib1s1 U6 ( .DIN(net3482), .Q(n10) );
  i1s3 U7 ( .DIN(n6), .Q(net3463) );
  ib1s1 U8 ( .DIN(init_val[4]), .Q(n25) );
  mxi21s2 U9 ( .DIN1(n2), .DIN2(n42), .SIN(count[4]), .Q(n44) );
  nnd3s2 U10 ( .DIN1(n19), .DIN2(n20), .DIN3(net4333), .Q(n4) );
  nnd3s2 U11 ( .DIN1(n28), .DIN2(n27), .DIN3(n26), .Q(n5) );
  ib1s1 U12 ( .DIN(n13), .Q(net3449) );
  ib1s2 U13 ( .DIN(n40), .Q(n35) );
  nnd2s2 U14 ( .DIN1(net3450), .DIN2(n41), .Q(n27) );
  i1s4 U15 ( .DIN(net4249), .Q(net3450) );
  nnd3s1 U16 ( .DIN1(count[1]), .DIN2(count[0]), .DIN3(bit_in), .Q(n6) );
  nnd3s2 U17 ( .DIN1(bit_in), .DIN2(count[0]), .DIN3(count[1]), .Q(net3473) );
  nor2s1 U18 ( .DIN1(init), .DIN2(reset), .Q(n7) );
  or2s1 U19 ( .DIN1(reset), .DIN2(n12), .Q(n13) );
  ib1s1 U20 ( .DIN(n15), .Q(n14) );
  i1s1 U21 ( .DIN(bit_in), .Q(n15) );
  mxi21s1 U22 ( .DIN1(net3482), .DIN2(net3481), .SIN(n3), .Q(n32) );
  hi1s1 U23 ( .DIN(init), .Q(n12) );
  and2s2 U24 ( .DIN1(n29), .DIN2(net3450), .Q(n8) );
  mxi21s2 U25 ( .DIN1(n8), .DIN2(n43), .SIN(count[4]), .Q(n18) );
  oai21s2 U26 ( .DIN1(n29), .DIN2(net4249), .DIN3(net3461), .Q(n43) );
  nnd2s1 U27 ( .DIN1(n14), .DIN2(enable), .Q(n11) );
  i1s3 U28 ( .DIN(enable), .Q(n9) );
  i1s3 U29 ( .DIN(n38), .Q(n45) );
  nnd2s2 U30 ( .DIN1(net3450), .DIN2(n14), .Q(net3481) );
  nnd2s2 U31 ( .DIN1(n14), .DIN2(n1), .Q(net3478) );
  or3s3 U32 ( .DIN1(init), .DIN2(reset), .DIN3(n9), .Q(net4249) );
  nnd2s2 U33 ( .DIN1(n9), .DIN2(n7), .Q(net3461) );
  nnd2s2 U34 ( .DIN1(count[1]), .DIN2(n10), .Q(net4333) );
  oai21s3 U35 ( .DIN1(net3463), .DIN2(net4249), .DIN3(net3461), .Q(n40) );
  nnd2s2 U36 ( .DIN1(n18), .DIN2(n17), .Q(n16) );
  or2s1 U37 ( .DIN1(n25), .DIN2(n13), .Q(n17) );
  aoi21s3 U38 ( .DIN1(init_val[2]), .DIN2(net3449), .DIN3(n37), .Q(n38) );
  nnd2s2 U39 ( .DIN1(init_val[1]), .DIN2(net3449), .Q(n19) );
  nnd2s1 U40 ( .DIN1(net3450), .DIN2(n34), .Q(n20) );
  i1s2 U41 ( .DIN(n33), .Q(n46) );
  aoi21s3 U42 ( .DIN1(init_val[0]), .DIN2(net3449), .DIN3(n32), .Q(n33) );
  nnd2s2 U43 ( .DIN1(init_val[5]), .DIN2(net3449), .Q(n21) );
  nnd2s1 U44 ( .DIN1(net3450), .DIN2(n44), .Q(n22) );
  nnd2s1 U45 ( .DIN1(count[5]), .DIN2(n43), .Q(n23) );
  nnd3s2 U46 ( .DIN1(n22), .DIN2(n21), .DIN3(n23), .Q(n24) );
  nnd2s2 U47 ( .DIN1(init_val[3]), .DIN2(net3449), .Q(n26) );
  nnd2s1 U48 ( .DIN1(count[3]), .DIN2(n40), .Q(n28) );
  nnd2s1 U49 ( .DIN1(net3450), .DIN2(net3463), .Q(n36) );
  mxi21s2 U50 ( .DIN1(n1), .DIN2(net3478), .SIN(count[0]), .Q(n34) );
  mxi21s2 U51 ( .DIN1(n36), .DIN2(n35), .SIN(count[2]), .Q(n37) );
  mxi21s2 U52 ( .DIN1(n30), .DIN2(n39), .SIN(count[2]), .Q(n41) );
  nnd2s2 U53 ( .DIN1(n2), .DIN2(n29), .Q(n42) );
endmodule


module multiplexer_3 ( bin_in, selector, zero_select, bin_out );
  input [5:0] bin_in;
  input [2:0] selector;
  input zero_select;
  output bin_out;
  wire   n1, n2, n3, n4, n5;

  aoi21s3 U2 ( .DIN1(n5), .DIN2(n4), .DIN3(zero_select), .Q(bin_out) );
  dsmxc31s2 U3 ( .DIN1(n3), .DIN2(n2), .CLK(selector[0]), .Q(n4) );
  mxi21s2 U4 ( .DIN1(bin_in[0]), .DIN2(bin_in[1]), .SIN(selector[0]), .Q(n1)
         );
  or3s1 U5 ( .DIN1(selector[1]), .DIN2(n1), .DIN3(selector[2]), .Q(n5) );
  aoi22s2 U6 ( .DIN1(selector[1]), .DIN2(bin_in[2]), .DIN3(selector[2]), 
        .DIN4(bin_in[4]), .Q(n3) );
  aoi22s2 U7 ( .DIN1(bin_in[3]), .DIN2(selector[1]), .DIN3(bin_in[5]), .DIN4(
        selector[2]), .Q(n2) );
endmodule


module processing_element_3 ( clock, reset, enable, init, selector, 
        zero_select, init_val, weight_val, output_val );
  input [2:0] selector;
  input [5:0] init_val;
  input [5:0] weight_val;
  output [5:0] output_val;
  input clock, reset, enable, init, zero_select;
  wire   bit_med;

  counter_3 counter_inst ( .clock(clock), .reset(reset), .enable(enable), 
        .init(init), .bit_in(bit_med), .init_val(init_val), .count(output_val)
         );
  multiplexer_3 multiplexer_inst ( .bin_in(weight_val), .selector(selector), 
        .zero_select(zero_select), .bin_out(bit_med) );
endmodule


module counter_2 ( clock, reset, enable, init, bit_in, init_val, count );
  input [5:0] init_val;
  output [5:0] count;
  input clock, reset, enable, init, bit_in;
  wire   n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16,
         n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
         n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44,
         n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58,
         n59, n60;

  dffs1 \count_reg[4]  ( .DIN(n35), .CLK(clock), .Q(count[4]), .QN(n18) );
  dffs1 \count_reg[3]  ( .DIN(n5), .CLK(clock), .Q(count[3]), .QN(n49) );
  dffs1 \count_reg[1]  ( .DIN(n3), .CLK(clock), .Q(count[1]), .QN(n43) );
  dffs1 \count_reg[2]  ( .DIN(n15), .CLK(clock), .Q(count[2]) );
  dffs1 \count_reg[5]  ( .DIN(n4), .CLK(clock), .Q(count[5]), .QN(n56) );
  dffs1 \count_reg[0]  ( .DIN(n19), .CLK(clock), .Q(count[0]) );
  ib1s1 U3 ( .DIN(init), .Q(n37) );
  nor2s1 U4 ( .DIN1(n28), .DIN2(n32), .Q(n9) );
  i1s3 U5 ( .DIN(n44), .Q(n40) );
  or2s2 U6 ( .DIN1(n28), .DIN2(n32), .Q(n1) );
  and2s1 U7 ( .DIN1(count[2]), .DIN2(count[3]), .Q(n2) );
  nnd3s2 U8 ( .DIN1(n24), .DIN2(n23), .DIN3(n22), .Q(n3) );
  nnd3s2 U9 ( .DIN1(n27), .DIN2(n26), .DIN3(n25), .Q(n4) );
  nnd3s2 U10 ( .DIN1(n6), .DIN2(n7), .DIN3(n8), .Q(n5) );
  nnd2s2 U11 ( .DIN1(init_val[3]), .DIN2(n60), .Q(n6) );
  nnd2s2 U12 ( .DIN1(n59), .DIN2(n51), .Q(n7) );
  nnd2s1 U13 ( .DIN1(n50), .DIN2(count[3]), .Q(n8) );
  or2s1 U14 ( .DIN1(n54), .DIN2(n52), .Q(n31) );
  nnd2s2 U15 ( .DIN1(n59), .DIN2(n58), .Q(n26) );
  mx21s3 U16 ( .DIN1(n47), .DIN2(n46), .SIN(count[2]), .Q(n17) );
  ib1s2 U17 ( .DIN(n50), .Q(n46) );
  nor2s1 U18 ( .DIN1(n28), .DIN2(n32), .Q(n10) );
  i1s8 U19 ( .DIN(bit_in), .Q(n32) );
  nnd2s3 U20 ( .DIN1(n17), .DIN2(n16), .Q(n15) );
  mxi21s1 U21 ( .DIN1(n57), .DIN2(n11), .SIN(n18), .Q(n14) );
  and2s2 U22 ( .DIN1(n59), .DIN2(n10), .Q(n11) );
  nnd3s2 U23 ( .DIN1(enable), .DIN2(n38), .DIN3(n37), .Q(n12) );
  nnd3s2 U24 ( .DIN1(enable), .DIN2(n38), .DIN3(n37), .Q(n54) );
  nnd2s1 U25 ( .DIN1(count[1]), .DIN2(n44), .Q(n24) );
  nnd2s2 U26 ( .DIN1(n13), .DIN2(n14), .Q(n35) );
  nnd2s2 U27 ( .DIN1(init_val[4]), .DIN2(n60), .Q(n13) );
  nnd2s2 U28 ( .DIN1(init_val[2]), .DIN2(n60), .Q(n16) );
  nnd2s2 U29 ( .DIN1(n20), .DIN2(n21), .Q(n19) );
  nnd2s2 U30 ( .DIN1(init_val[0]), .DIN2(n60), .Q(n20) );
  mx21s2 U31 ( .DIN1(n41), .DIN2(n40), .SIN(count[0]), .Q(n21) );
  nnd2s2 U32 ( .DIN1(init_val[1]), .DIN2(n60), .Q(n22) );
  nnd2s1 U33 ( .DIN1(n59), .DIN2(n45), .Q(n23) );
  nnd2s2 U34 ( .DIN1(init_val[5]), .DIN2(n60), .Q(n25) );
  nnd2s1 U35 ( .DIN1(count[5]), .DIN2(n57), .Q(n27) );
  nnd2s1 U36 ( .DIN1(n2), .DIN2(n36), .Q(n28) );
  mxi21s2 U37 ( .DIN1(n56), .DIN2(n55), .SIN(count[4]), .Q(n58) );
  nnd2s2 U38 ( .DIN1(n9), .DIN2(n56), .Q(n55) );
  i1s8 U39 ( .DIN(n12), .Q(n59) );
  i1s8 U40 ( .DIN(n39), .Q(n60) );
  nnd2s2 U41 ( .DIN1(n34), .DIN2(n53), .Q(n44) );
  i1s4 U42 ( .DIN(reset), .Q(n38) );
  nnd2s2 U43 ( .DIN1(n31), .DIN2(n53), .Q(n50) );
  nnd2s2 U44 ( .DIN1(n30), .DIN2(n53), .Q(n57) );
  nnd3s2 U45 ( .DIN1(n39), .DIN2(n12), .DIN3(n38), .Q(n53) );
  and3s1 U46 ( .DIN1(enable), .DIN2(n38), .DIN3(n37), .Q(n29) );
  nnd2s2 U47 ( .DIN1(n29), .DIN2(n1), .Q(n30) );
  nnd2s1 U48 ( .DIN1(n32), .DIN2(n33), .Q(n34) );
  i1s1 U49 ( .DIN(n54), .Q(n33) );
  and2s1 U50 ( .DIN1(count[1]), .DIN2(count[0]), .Q(n36) );
  nnd2s1 U51 ( .DIN1(n38), .DIN2(init), .Q(n39) );
  nnd2s1 U52 ( .DIN1(n59), .DIN2(n52), .Q(n47) );
  and2s2 U53 ( .DIN1(bit_in), .DIN2(n36), .Q(n52) );
  nnd2s1 U54 ( .DIN1(n59), .DIN2(bit_in), .Q(n41) );
  nnd2s1 U55 ( .DIN1(bit_in), .DIN2(n43), .Q(n42) );
  mxi21s2 U56 ( .DIN1(n43), .DIN2(n42), .SIN(count[0]), .Q(n45) );
  nnd2s2 U57 ( .DIN1(n52), .DIN2(n49), .Q(n48) );
  mxi21s2 U58 ( .DIN1(n49), .DIN2(n48), .SIN(count[2]), .Q(n51) );
endmodule


module multiplexer_2 ( bin_in, selector, zero_select, bin_out );
  input [5:0] bin_in;
  input [2:0] selector;
  input zero_select;
  output bin_out;
  wire   n1, n2, n3, n4, n5;

  aoi21s2 U2 ( .DIN1(n5), .DIN2(n4), .DIN3(zero_select), .Q(bin_out) );
  dsmxc31s2 U3 ( .DIN1(n3), .DIN2(n2), .CLK(selector[0]), .Q(n4) );
  mxi21s2 U4 ( .DIN1(bin_in[0]), .DIN2(bin_in[1]), .SIN(selector[0]), .Q(n1)
         );
  or3s1 U5 ( .DIN1(selector[1]), .DIN2(n1), .DIN3(selector[2]), .Q(n5) );
  aoi22s2 U6 ( .DIN1(selector[1]), .DIN2(bin_in[2]), .DIN3(selector[2]), 
        .DIN4(bin_in[4]), .Q(n3) );
  aoi22s2 U7 ( .DIN1(bin_in[3]), .DIN2(selector[1]), .DIN3(bin_in[5]), .DIN4(
        selector[2]), .Q(n2) );
endmodule


module processing_element_2 ( clock, reset, enable, init, selector, 
        zero_select, init_val, weight_val, output_val );
  input [2:0] selector;
  input [5:0] init_val;
  input [5:0] weight_val;
  output [5:0] output_val;
  input clock, reset, enable, init, zero_select;
  wire   bit_med;

  counter_2 counter_inst ( .clock(clock), .reset(reset), .enable(enable), 
        .init(init), .bit_in(bit_med), .init_val(init_val), .count(output_val)
         );
  multiplexer_2 multiplexer_inst ( .bin_in(weight_val), .selector(selector), 
        .zero_select(zero_select), .bin_out(bit_med) );
endmodule


module counter_1 ( clock, reset, enable, init, bit_in, init_val, count );
  input [5:0] init_val;
  output [5:0] count;
  input clock, reset, enable, init, bit_in;
  wire   n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16,
         n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
         n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44,
         n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58,
         n59, n60, n61, n62;

  dffs1 \count_reg[4]  ( .DIN(n32), .CLK(clock), .Q(count[4]), .QN(n7) );
  dffs1 \count_reg[2]  ( .DIN(n4), .CLK(clock), .Q(count[2]), .QN(n8) );
  dffs1 \count_reg[1]  ( .DIN(n19), .CLK(clock), .Q(count[1]), .QN(n44) );
  dffs1 \count_reg[5]  ( .DIN(n30), .CLK(clock), .Q(count[5]), .QN(n58) );
  dffs1 \count_reg[3]  ( .DIN(n2), .CLK(clock), .Q(count[3]), .QN(n50) );
  dffs1 \count_reg[0]  ( .DIN(n62), .CLK(clock), .Q(count[0]) );
  i1s3 U3 ( .DIN(n42), .Q(n62) );
  i1s2 U4 ( .DIN(n51), .Q(n47) );
  i1s3 U5 ( .DIN(n55), .Q(n28) );
  ib1s2 U6 ( .DIN(n55), .Q(n23) );
  ib1s1 U7 ( .DIN(init), .Q(n36) );
  and2s2 U8 ( .DIN1(n53), .DIN2(n1), .Q(n56) );
  ib1s1 U9 ( .DIN(bit_in), .Q(n27) );
  ib1s1 U10 ( .DIN(n56), .Q(n22) );
  mxi21s2 U11 ( .DIN1(n40), .DIN2(n39), .SIN(count[0]), .Q(n41) );
  or2s1 U12 ( .DIN1(n20), .DIN2(n21), .Q(n5) );
  ib1s1 U13 ( .DIN(init_val[2]), .Q(n20) );
  and2s1 U14 ( .DIN1(count[3]), .DIN2(count[2]), .Q(n1) );
  nnd3s2 U15 ( .DIN1(n9), .DIN2(n10), .DIN3(n11), .Q(n2) );
  i1s3 U16 ( .DIN(n45), .Q(n39) );
  and2s1 U17 ( .DIN1(n23), .DIN2(n56), .Q(n14) );
  nnd2s1 U18 ( .DIN1(count[3]), .DIN2(n51), .Q(n11) );
  ib1s1 U19 ( .DIN(n39), .Q(n3) );
  nnd2s2 U20 ( .DIN1(count[1]), .DIN2(n3), .Q(n18) );
  hi1s1 U21 ( .DIN(n61), .Q(n21) );
  nnd2s2 U22 ( .DIN1(n5), .DIN2(n6), .Q(n4) );
  mx21s2 U23 ( .DIN1(n47), .DIN2(n48), .SIN(n8), .Q(n6) );
  mxi21s2 U24 ( .DIN1(n59), .DIN2(n14), .SIN(n7), .Q(n13) );
  nnd2s2 U25 ( .DIN1(n25), .DIN2(n28), .Q(n26) );
  nnd2s2 U26 ( .DIN1(n23), .DIN2(n22), .Q(n24) );
  nnd2s2 U27 ( .DIN1(n27), .DIN2(n28), .Q(n29) );
  nnd2s1 U28 ( .DIN1(init_val[3]), .DIN2(n61), .Q(n9) );
  nnd2s1 U29 ( .DIN1(n23), .DIN2(n52), .Q(n10) );
  nnd2s1 U30 ( .DIN1(n24), .DIN2(n54), .Q(n59) );
  nnd2s2 U31 ( .DIN1(n54), .DIN2(n29), .Q(n45) );
  nnd2s2 U32 ( .DIN1(n12), .DIN2(n13), .Q(n32) );
  nnd2s1 U33 ( .DIN1(init_val[4]), .DIN2(n61), .Q(n12) );
  ib1s1 U34 ( .DIN(n27), .Q(n15) );
  nnd2s1 U35 ( .DIN1(n23), .DIN2(n53), .Q(n48) );
  nnd2s1 U36 ( .DIN1(n53), .DIN2(n50), .Q(n49) );
  i1s3 U37 ( .DIN(reset), .Q(n37) );
  i1s1 U38 ( .DIN(n53), .Q(n25) );
  and2s2 U39 ( .DIN1(bit_in), .DIN2(n31), .Q(n53) );
  nnd3s3 U40 ( .DIN1(n37), .DIN2(enable), .DIN3(n36), .Q(n55) );
  nnd2s2 U41 ( .DIN1(n54), .DIN2(n26), .Q(n51) );
  nnd2s1 U42 ( .DIN1(init_val[1]), .DIN2(n61), .Q(n16) );
  nnd2s1 U43 ( .DIN1(n23), .DIN2(n46), .Q(n17) );
  nnd3s2 U44 ( .DIN1(n16), .DIN2(n17), .DIN3(n18), .Q(n19) );
  i1s8 U45 ( .DIN(n38), .Q(n61) );
  aoi21s3 U46 ( .DIN1(init_val[0]), .DIN2(n61), .DIN3(n41), .Q(n42) );
  nnd2s1 U47 ( .DIN1(n23), .DIN2(n60), .Q(n34) );
  nnd2s1 U48 ( .DIN1(n56), .DIN2(n58), .Q(n57) );
  nnd3s2 U49 ( .DIN1(n33), .DIN2(n34), .DIN3(n35), .Q(n30) );
  and2s1 U50 ( .DIN1(count[1]), .DIN2(count[0]), .Q(n31) );
  nnd2s1 U51 ( .DIN1(n37), .DIN2(init), .Q(n38) );
  nnd2s2 U52 ( .DIN1(init_val[5]), .DIN2(n61), .Q(n33) );
  nnd2s1 U53 ( .DIN1(n59), .DIN2(count[5]), .Q(n35) );
  nnd2s1 U54 ( .DIN1(n23), .DIN2(n15), .Q(n40) );
  nnd2s1 U55 ( .DIN1(n15), .DIN2(n44), .Q(n43) );
  nnd3s2 U56 ( .DIN1(n38), .DIN2(n55), .DIN3(n37), .Q(n54) );
  mxi21s2 U57 ( .DIN1(n44), .DIN2(n43), .SIN(count[0]), .Q(n46) );
  mxi21s2 U58 ( .DIN1(n50), .DIN2(n49), .SIN(count[2]), .Q(n52) );
  mxi21s2 U59 ( .DIN1(n58), .DIN2(n57), .SIN(count[4]), .Q(n60) );
endmodule


module multiplexer_1 ( bin_in, selector, zero_select, bin_out );
  input [5:0] bin_in;
  input [2:0] selector;
  input zero_select;
  output bin_out;
  wire   n1, n2, n3, n4, n5;

  aoi21s3 U2 ( .DIN1(n5), .DIN2(n4), .DIN3(zero_select), .Q(bin_out) );
  dsmxc31s2 U3 ( .DIN1(n3), .DIN2(n2), .CLK(selector[0]), .Q(n4) );
  mxi21s2 U4 ( .DIN1(bin_in[0]), .DIN2(bin_in[1]), .SIN(selector[0]), .Q(n1)
         );
  or3s1 U5 ( .DIN1(selector[1]), .DIN2(n1), .DIN3(selector[2]), .Q(n5) );
  aoi22s2 U6 ( .DIN1(selector[1]), .DIN2(bin_in[2]), .DIN3(selector[2]), 
        .DIN4(bin_in[4]), .Q(n3) );
  aoi22s2 U7 ( .DIN1(bin_in[3]), .DIN2(selector[1]), .DIN3(bin_in[5]), .DIN4(
        selector[2]), .Q(n2) );
endmodule


module processing_element_1 ( clock, reset, enable, init, selector, 
        zero_select, init_val, weight_val, output_val );
  input [2:0] selector;
  input [5:0] init_val;
  input [5:0] weight_val;
  output [5:0] output_val;
  input clock, reset, enable, init, zero_select;
  wire   bit_med;

  counter_1 counter_inst ( .clock(clock), .reset(reset), .enable(enable), 
        .init(init), .bit_in(bit_med), .init_val(init_val), .count(output_val)
         );
  multiplexer_1 multiplexer_inst ( .bin_in(weight_val), .selector(selector), 
        .zero_select(zero_select), .bin_out(bit_med) );
endmodule


module counter_0 ( clock, reset, enable, init, bit_in, init_val, count );
  input [5:0] init_val;
  output [5:0] count;
  input clock, reset, enable, init, bit_in;
  wire   n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16,
         n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
         n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44,
         n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58,
         n59, n60;

  dffs1 \count_reg[2]  ( .DIN(n60), .CLK(clock), .Q(count[2]), .QN(n31) );
  dffs1 \count_reg[3]  ( .DIN(n6), .CLK(clock), .Q(count[3]), .QN(n30) );
  dffs1 \count_reg[1]  ( .DIN(n11), .CLK(clock), .Q(count[1]), .QN(n39) );
  dffs1 \count_reg[4]  ( .DIN(n2), .CLK(clock), .Q(count[4]) );
  dffs1 \count_reg[5]  ( .DIN(n28), .CLK(clock), .Q(count[5]), .QN(n56) );
  dffs1 \count_reg[0]  ( .DIN(n7), .CLK(clock), .Q(count[0]) );
  or2s2 U3 ( .DIN1(n52), .DIN2(n29), .Q(n25) );
  ib1s1 U4 ( .DIN(init), .Q(n36) );
  i1s5 U5 ( .DIN(reset), .Q(n4) );
  i1s8 U6 ( .DIN(n37), .Q(n59) );
  nnd2s1 U7 ( .DIN1(n58), .DIN2(n29), .Q(n53) );
  nb1s1 U8 ( .DIN(bit_in), .Q(n35) );
  and2s1 U9 ( .DIN1(init_val[4]), .DIN2(n59), .Q(n10) );
  mxi21s2 U10 ( .DIN1(n53), .DIN2(n18), .SIN(count[4]), .Q(n54) );
  ib1s1 U11 ( .DIN(n42), .Q(n50) );
  nnd2s2 U12 ( .DIN1(n35), .DIN2(n24), .Q(n42) );
  ib1s1 U13 ( .DIN(n52), .Q(n21) );
  or2s1 U14 ( .DIN1(n30), .DIN2(n31), .Q(n1) );
  or2s2 U15 ( .DIN1(n10), .DIN2(n54), .Q(n2) );
  i1s3 U16 ( .DIN(n46), .Q(n60) );
  mxi21s2 U17 ( .DIN1(n44), .DIN2(n43), .SIN(count[2]), .Q(n45) );
  and2s1 U18 ( .DIN1(n58), .DIN2(n35), .Q(n3) );
  i1s8 U19 ( .DIN(n52), .Q(n58) );
  mxi21s2 U20 ( .DIN1(n3), .DIN2(n40), .SIN(count[0]), .Q(n9) );
  nnd2s1 U21 ( .DIN1(n27), .DIN2(n51), .Q(n40) );
  i1s8 U22 ( .DIN(reset), .Q(n5) );
  i1s3 U23 ( .DIN(n48), .Q(n43) );
  nnd2s2 U24 ( .DIN1(init), .DIN2(n4), .Q(n37) );
  nnd3s2 U25 ( .DIN1(n15), .DIN2(n16), .DIN3(n17), .Q(n6) );
  nnd2s1 U26 ( .DIN1(n50), .DIN2(n30), .Q(n47) );
  nnd2s2 U27 ( .DIN1(n9), .DIN2(n8), .Q(n7) );
  nnd2s2 U28 ( .DIN1(init_val[0]), .DIN2(n59), .Q(n8) );
  nnd3s2 U29 ( .DIN1(n12), .DIN2(n13), .DIN3(n14), .Q(n11) );
  nnd2s2 U30 ( .DIN1(init_val[1]), .DIN2(n59), .Q(n12) );
  nnd2s1 U31 ( .DIN1(n58), .DIN2(n41), .Q(n13) );
  nnd2s1 U32 ( .DIN1(count[1]), .DIN2(n40), .Q(n14) );
  i1s1 U33 ( .DIN(n18), .Q(n19) );
  nnd2s2 U34 ( .DIN1(n19), .DIN2(count[5]), .Q(n34) );
  aoi21s3 U35 ( .DIN1(init_val[2]), .DIN2(n59), .DIN3(n45), .Q(n46) );
  nnd2s1 U36 ( .DIN1(init_val[3]), .DIN2(n59), .Q(n15) );
  nnd2s1 U37 ( .DIN1(n58), .DIN2(n49), .Q(n16) );
  nnd2s1 U38 ( .DIN1(count[3]), .DIN2(n48), .Q(n17) );
  nnd3s3 U39 ( .DIN1(n4), .DIN2(enable), .DIN3(n36), .Q(n52) );
  nnd2s2 U40 ( .DIN1(n21), .DIN2(n42), .Q(n22) );
  nnd2s2 U41 ( .DIN1(n22), .DIN2(n51), .Q(n48) );
  and2s2 U42 ( .DIN1(n25), .DIN2(n51), .Q(n18) );
  and2s1 U43 ( .DIN1(bit_in), .DIN2(n20), .Q(n29) );
  nor2s1 U44 ( .DIN1(n23), .DIN2(n1), .Q(n20) );
  nnd2s2 U45 ( .DIN1(count[1]), .DIN2(count[0]), .Q(n23) );
  ib1s1 U46 ( .DIN(n23), .Q(n24) );
  nnd2s1 U47 ( .DIN1(n58), .DIN2(n57), .Q(n33) );
  hi1s1 U48 ( .DIN(n35), .Q(n26) );
  nnd2s1 U49 ( .DIN1(n26), .DIN2(n21), .Q(n27) );
  nnd2s1 U50 ( .DIN1(n58), .DIN2(n50), .Q(n44) );
  nnd3s2 U51 ( .DIN1(n37), .DIN2(n5), .DIN3(n52), .Q(n51) );
  nnd2s1 U52 ( .DIN1(n29), .DIN2(n56), .Q(n55) );
  nnd2s1 U53 ( .DIN1(n35), .DIN2(n39), .Q(n38) );
  nnd3s2 U54 ( .DIN1(n34), .DIN2(n33), .DIN3(n32), .Q(n28) );
  nnd2s2 U55 ( .DIN1(init_val[5]), .DIN2(n59), .Q(n32) );
  mxi21s2 U56 ( .DIN1(n39), .DIN2(n38), .SIN(count[0]), .Q(n41) );
  mxi21s2 U57 ( .DIN1(n30), .DIN2(n47), .SIN(count[2]), .Q(n49) );
  mxi21s2 U58 ( .DIN1(n56), .DIN2(n55), .SIN(count[4]), .Q(n57) );
endmodule


module multiplexer_0 ( bin_in, selector, zero_select, bin_out );
  input [5:0] bin_in;
  input [2:0] selector;
  input zero_select;
  output bin_out;
  wire   n1, n2, n3, n4, n5, n6;

  nor2s1 U2 ( .DIN1(n1), .DIN2(zero_select), .Q(bin_out) );
  and2s1 U3 ( .DIN1(n6), .DIN2(n5), .Q(n1) );
  dsmxc31s2 U4 ( .DIN1(n4), .DIN2(n3), .CLK(selector[0]), .Q(n5) );
  mxi21s2 U5 ( .DIN1(bin_in[0]), .DIN2(bin_in[1]), .SIN(selector[0]), .Q(n2)
         );
  or3s1 U6 ( .DIN1(selector[1]), .DIN2(n2), .DIN3(selector[2]), .Q(n6) );
  aoi22s2 U7 ( .DIN1(selector[1]), .DIN2(bin_in[2]), .DIN3(selector[2]), 
        .DIN4(bin_in[4]), .Q(n4) );
  aoi22s2 U8 ( .DIN1(bin_in[3]), .DIN2(selector[1]), .DIN3(bin_in[5]), .DIN4(
        selector[2]), .Q(n3) );
endmodule


module processing_element_0 ( clock, reset, enable, init, selector, 
        zero_select, init_val, weight_val, output_val );
  input [2:0] selector;
  input [5:0] init_val;
  input [5:0] weight_val;
  output [5:0] output_val;
  input clock, reset, enable, init, zero_select;
  wire   bit_med;

  counter_0 counter_inst ( .clock(clock), .reset(reset), .enable(enable), 
        .init(init), .bit_in(bit_med), .init_val(init_val), .count(output_val)
         );
  multiplexer_0 multiplexer_inst ( .bin_in(weight_val), .selector(selector), 
        .zero_select(zero_select), .bin_out(bit_med) );
endmodule


module partial_result_buffer ( clock, reset, enable, .store_vals({
        \store_vals[1][5] , \store_vals[1][4] , \store_vals[1][3] , 
        \store_vals[1][2] , \store_vals[1][1] , \store_vals[1][0] , 
        \store_vals[0][5] , \store_vals[0][4] , \store_vals[0][3] , 
        \store_vals[0][2] , \store_vals[0][1] , \store_vals[0][0] }), 
        width_index, .fetch_vals({\fetch_vals[1][5] , \fetch_vals[1][4] , 
        \fetch_vals[1][3] , \fetch_vals[1][2] , \fetch_vals[1][1] , 
        \fetch_vals[1][0] , \fetch_vals[0][5] , \fetch_vals[0][4] , 
        \fetch_vals[0][3] , \fetch_vals[0][2] , \fetch_vals[0][1] , 
        \fetch_vals[0][0] }) );
  input [1:0] width_index;
  input clock, reset, enable, \store_vals[1][5] , \store_vals[1][4] ,
         \store_vals[1][3] , \store_vals[1][2] , \store_vals[1][1] ,
         \store_vals[1][0] , \store_vals[0][5] , \store_vals[0][4] ,
         \store_vals[0][3] , \store_vals[0][2] , \store_vals[0][1] ,
         \store_vals[0][0] ;
  output \fetch_vals[1][5] , \fetch_vals[1][4] , \fetch_vals[1][3] ,
         \fetch_vals[1][2] , \fetch_vals[1][1] , \fetch_vals[1][0] ,
         \fetch_vals[0][5] , \fetch_vals[0][4] , \fetch_vals[0][3] ,
         \fetch_vals[0][2] , \fetch_vals[0][1] , \fetch_vals[0][0] ;
  wire   N5, N6, \stored_partial_sums[0][3][5] ,
         \stored_partial_sums[0][3][4] , \stored_partial_sums[0][3][3] ,
         \stored_partial_sums[0][3][2] , \stored_partial_sums[0][3][1] ,
         \stored_partial_sums[0][3][0] , \stored_partial_sums[0][2][5] ,
         \stored_partial_sums[0][2][4] , \stored_partial_sums[0][2][3] ,
         \stored_partial_sums[0][2][2] , \stored_partial_sums[0][2][1] ,
         \stored_partial_sums[0][2][0] , \stored_partial_sums[0][1][5] ,
         \stored_partial_sums[0][1][4] , \stored_partial_sums[0][1][3] ,
         \stored_partial_sums[0][1][2] , \stored_partial_sums[0][1][1] ,
         \stored_partial_sums[0][1][0] , \stored_partial_sums[0][0][5] ,
         \stored_partial_sums[0][0][4] , \stored_partial_sums[0][0][3] ,
         \stored_partial_sums[0][0][2] , \stored_partial_sums[0][0][1] ,
         \stored_partial_sums[0][0][0] , n19, n20, n21, n22, n23, n24, n25,
         n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39,
         n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53,
         n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67,
         n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81,
         n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95,
         n96, n97, n98, n99;
  assign N5 = width_index[0];
  assign N6 = width_index[1];

  dffs1 \stored_partial_sums_reg[0][2][0]  ( .DIN(n82), .CLK(clock), .Q(
        \stored_partial_sums[0][2][0] ) );
  dffs1 \stored_partial_sums_reg[0][2][1]  ( .DIN(n85), .CLK(clock), .Q(
        \stored_partial_sums[0][2][1] ) );
  dffs1 \stored_partial_sums_reg[0][2][2]  ( .DIN(n88), .CLK(clock), .Q(
        \stored_partial_sums[0][2][2] ) );
  dffs1 \stored_partial_sums_reg[0][2][3]  ( .DIN(n91), .CLK(clock), .Q(
        \stored_partial_sums[0][2][3] ) );
  dffs1 \stored_partial_sums_reg[0][2][4]  ( .DIN(n94), .CLK(clock), .Q(
        \stored_partial_sums[0][2][4] ) );
  dffs1 \stored_partial_sums_reg[0][2][5]  ( .DIN(n97), .CLK(clock), .Q(
        \stored_partial_sums[0][2][5] ) );
  dffs1 \stored_partial_sums_reg[0][0][5]  ( .DIN(n99), .CLK(clock), .Q(
        \stored_partial_sums[0][0][5] ) );
  dffs1 \stored_partial_sums_reg[0][0][3]  ( .DIN(n93), .CLK(clock), .Q(
        \stored_partial_sums[0][0][3] ) );
  dffs1 \stored_partial_sums_reg[0][0][1]  ( .DIN(n87), .CLK(clock), .Q(
        \stored_partial_sums[0][0][1] ) );
  dffs1 \stored_partial_sums_reg[0][0][0]  ( .DIN(n84), .CLK(clock), .Q(
        \stored_partial_sums[0][0][0] ) );
  dffs1 \stored_partial_sums_reg[0][0][4]  ( .DIN(n96), .CLK(clock), .Q(
        \stored_partial_sums[0][0][4] ) );
  dffles1 \stored_partial_sums_reg[0][3][5]  ( .DIN(1'b0), .EB(n43), .CLK(
        clock), .Q(\stored_partial_sums[0][3][5] ) );
  dffles1 \stored_partial_sums_reg[0][3][4]  ( .DIN(1'b0), .EB(n43), .CLK(
        clock), .Q(\stored_partial_sums[0][3][4] ) );
  dffles1 \stored_partial_sums_reg[0][3][3]  ( .DIN(1'b0), .EB(n43), .CLK(
        clock), .Q(\stored_partial_sums[0][3][3] ) );
  dffles1 \stored_partial_sums_reg[0][3][2]  ( .DIN(1'b0), .EB(n43), .CLK(
        clock), .Q(\stored_partial_sums[0][3][2] ) );
  dffles1 \stored_partial_sums_reg[0][3][1]  ( .DIN(1'b0), .EB(n43), .CLK(
        clock), .Q(\stored_partial_sums[0][3][1] ) );
  dffles1 \stored_partial_sums_reg[0][3][0]  ( .DIN(1'b0), .EB(n43), .CLK(
        clock), .Q(\stored_partial_sums[0][3][0] ) );
  dffs1 \stored_partial_sums_reg[0][0][2]  ( .DIN(n90), .CLK(clock), .Q(
        \stored_partial_sums[0][0][2] ) );
  dffs1 \stored_partial_sums_reg[0][1][5]  ( .DIN(n98), .CLK(clock), .Q(
        \stored_partial_sums[0][1][5] ) );
  dffs1 \stored_partial_sums_reg[0][1][4]  ( .DIN(n95), .CLK(clock), .Q(
        \stored_partial_sums[0][1][4] ) );
  dffs1 \stored_partial_sums_reg[0][1][3]  ( .DIN(n92), .CLK(clock), .Q(
        \stored_partial_sums[0][1][3] ), .QN(n19) );
  dffs1 \stored_partial_sums_reg[0][1][2]  ( .DIN(n89), .CLK(clock), .Q(
        \stored_partial_sums[0][1][2] ) );
  dffs1 \stored_partial_sums_reg[0][1][1]  ( .DIN(n86), .CLK(clock), .Q(
        \stored_partial_sums[0][1][1] ) );
  dffs1 \stored_partial_sums_reg[0][1][0]  ( .DIN(n83), .CLK(clock), .Q(
        \stored_partial_sums[0][1][0] ) );
  ib1s1 U9 ( .DIN(1'b1), .Q(\fetch_vals[0][5] ) );
  ib1s1 U11 ( .DIN(1'b1), .Q(\fetch_vals[0][4] ) );
  ib1s1 U13 ( .DIN(1'b1), .Q(\fetch_vals[0][3] ) );
  ib1s1 U15 ( .DIN(1'b1), .Q(\fetch_vals[0][2] ) );
  ib1s1 U17 ( .DIN(1'b1), .Q(\fetch_vals[0][1] ) );
  ib1s1 U19 ( .DIN(1'b1), .Q(\fetch_vals[0][0] ) );
  or2s2 U21 ( .DIN1(n21), .DIN2(n44), .Q(n54) );
  ib1s1 U22 ( .DIN(n44), .Q(n65) );
  i1s3 U23 ( .DIN(n55), .Q(n61) );
  oai21s2 U24 ( .DIN1(n68), .DIN2(n63), .DIN3(n56), .Q(n83) );
  oai21s2 U25 ( .DIN1(n70), .DIN2(n63), .DIN3(n57), .Q(n86) );
  oai21s2 U26 ( .DIN1(n72), .DIN2(n23), .DIN3(n58), .Q(n89) );
  ib1s1 U27 ( .DIN(reset), .Q(n43) );
  ib1s1 U28 ( .DIN(N5), .Q(n42) );
  ib1s1 U29 ( .DIN(reset), .Q(n81) );
  ib1s1 U30 ( .DIN(N6), .Q(n41) );
  or2s1 U31 ( .DIN1(n19), .DIN2(n55), .Q(n59) );
  oai21s3 U32 ( .DIN1(N5), .DIN2(n54), .DIN3(n43), .Q(n55) );
  nor2s2 U33 ( .DIN1(n21), .DIN2(n44), .Q(n20) );
  and2s1 U34 ( .DIN1(n42), .DIN2(n41), .Q(n21) );
  nnd2s2 U35 ( .DIN1(enable), .DIN2(n81), .Q(n44) );
  oai21s3 U36 ( .DIN1(n79), .DIN2(n53), .DIN3(n52), .Q(n99) );
  oai21s3 U37 ( .DIN1(n76), .DIN2(n53), .DIN3(n50), .Q(n96) );
  oai21s3 U38 ( .DIN1(n74), .DIN2(n53), .DIN3(n49), .Q(n93) );
  oai21s3 U39 ( .DIN1(n70), .DIN2(n53), .DIN3(n47), .Q(n87) );
  oai21s3 U40 ( .DIN1(n68), .DIN2(n53), .DIN3(n46), .Q(n84) );
  oai21s3 U41 ( .DIN1(n72), .DIN2(n53), .DIN3(n48), .Q(n90) );
  nnd2s3 U42 ( .DIN1(n65), .DIN2(n45), .Q(n53) );
  nnd2s2 U43 ( .DIN1(\stored_partial_sums[0][0][2] ), .DIN2(n51), .Q(n48) );
  oai21s1 U44 ( .DIN1(N6), .DIN2(n64), .DIN3(n43), .Q(n22) );
  oai21s2 U45 ( .DIN1(N6), .DIN2(n64), .DIN3(n43), .Q(n45) );
  nnd2s1 U46 ( .DIN1(n65), .DIN2(n55), .Q(n23) );
  nnd2s3 U47 ( .DIN1(n20), .DIN2(N5), .Q(n64) );
  oai21s2 U48 ( .DIN1(n41), .DIN2(n64), .DIN3(n43), .Q(n24) );
  nnd2s1 U49 ( .DIN1(\stored_partial_sums[0][1][2] ), .DIN2(n61), .Q(n58) );
  nnd2s1 U50 ( .DIN1(\stored_partial_sums[0][1][1] ), .DIN2(n61), .Q(n57) );
  nnd2s1 U51 ( .DIN1(\stored_partial_sums[0][1][0] ), .DIN2(n61), .Q(n56) );
  nnd2s1 U52 ( .DIN1(n65), .DIN2(n55), .Q(n63) );
  nnd2s1 U53 ( .DIN1(n34), .DIN2(n33), .Q(\fetch_vals[1][4] ) );
  ib1s1 U54 ( .DIN(\store_vals[0][3] ), .Q(n74) );
  ib1s1 U55 ( .DIN(\store_vals[0][1] ), .Q(n70) );
  ib1s1 U56 ( .DIN(\store_vals[0][2] ), .Q(n72) );
  ib1s1 U57 ( .DIN(\store_vals[0][5] ), .Q(n79) );
  ib1s1 U58 ( .DIN(\store_vals[0][0] ), .Q(n68) );
  ib1s1 U59 ( .DIN(\store_vals[0][4] ), .Q(n76) );
  nor2s1 U60 ( .DIN1(n41), .DIN2(N5), .Q(n36) );
  nor2s1 U61 ( .DIN1(n41), .DIN2(n42), .Q(n35) );
  aoi22s1 U62 ( .DIN1(\stored_partial_sums[0][2][0] ), .DIN2(n36), .DIN3(
        \stored_partial_sums[0][3][0] ), .DIN4(n35), .Q(n26) );
  nor2s1 U63 ( .DIN1(N5), .DIN2(N6), .Q(n38) );
  nor2s1 U64 ( .DIN1(n42), .DIN2(N6), .Q(n37) );
  aoi22s1 U65 ( .DIN1(\stored_partial_sums[0][0][0] ), .DIN2(n38), .DIN3(
        \stored_partial_sums[0][1][0] ), .DIN4(n37), .Q(n25) );
  nnd2s1 U66 ( .DIN1(n26), .DIN2(n25), .Q(\fetch_vals[1][0] ) );
  aoi22s1 U67 ( .DIN1(\stored_partial_sums[0][2][1] ), .DIN2(n36), .DIN3(
        \stored_partial_sums[0][3][1] ), .DIN4(n35), .Q(n28) );
  aoi22s1 U68 ( .DIN1(\stored_partial_sums[0][0][1] ), .DIN2(n38), .DIN3(
        \stored_partial_sums[0][1][1] ), .DIN4(n37), .Q(n27) );
  nnd2s1 U69 ( .DIN1(n28), .DIN2(n27), .Q(\fetch_vals[1][1] ) );
  aoi22s1 U70 ( .DIN1(\stored_partial_sums[0][2][2] ), .DIN2(n36), .DIN3(
        \stored_partial_sums[0][3][2] ), .DIN4(n35), .Q(n30) );
  aoi22s1 U71 ( .DIN1(\stored_partial_sums[0][0][2] ), .DIN2(n38), .DIN3(
        \stored_partial_sums[0][1][2] ), .DIN4(n37), .Q(n29) );
  nnd2s1 U72 ( .DIN1(n30), .DIN2(n29), .Q(\fetch_vals[1][2] ) );
  aoi22s1 U73 ( .DIN1(\stored_partial_sums[0][2][3] ), .DIN2(n36), .DIN3(
        \stored_partial_sums[0][3][3] ), .DIN4(n35), .Q(n32) );
  aoi22s1 U74 ( .DIN1(\stored_partial_sums[0][0][3] ), .DIN2(n38), .DIN3(
        \stored_partial_sums[0][1][3] ), .DIN4(n37), .Q(n31) );
  nnd2s1 U75 ( .DIN1(n32), .DIN2(n31), .Q(\fetch_vals[1][3] ) );
  aoi22s1 U76 ( .DIN1(\stored_partial_sums[0][2][4] ), .DIN2(n36), .DIN3(
        \stored_partial_sums[0][3][4] ), .DIN4(n35), .Q(n34) );
  aoi22s1 U77 ( .DIN1(\stored_partial_sums[0][0][4] ), .DIN2(n38), .DIN3(
        \stored_partial_sums[0][1][4] ), .DIN4(n37), .Q(n33) );
  aoi22s1 U78 ( .DIN1(\stored_partial_sums[0][2][5] ), .DIN2(n36), .DIN3(
        \stored_partial_sums[0][3][5] ), .DIN4(n35), .Q(n40) );
  aoi22s1 U79 ( .DIN1(\stored_partial_sums[0][0][5] ), .DIN2(n38), .DIN3(
        \stored_partial_sums[0][1][5] ), .DIN4(n37), .Q(n39) );
  nnd2s1 U80 ( .DIN1(n40), .DIN2(n39), .Q(\fetch_vals[1][5] ) );
  i1s8 U81 ( .DIN(n22), .Q(n51) );
  i1s8 U82 ( .DIN(n66), .Q(n77) );
  nnd2s2 U83 ( .DIN1(\stored_partial_sums[0][0][0] ), .DIN2(n51), .Q(n46) );
  nnd2s2 U84 ( .DIN1(\stored_partial_sums[0][0][1] ), .DIN2(n51), .Q(n47) );
  nnd2s2 U85 ( .DIN1(\stored_partial_sums[0][0][3] ), .DIN2(n51), .Q(n49) );
  nnd2s2 U86 ( .DIN1(\stored_partial_sums[0][0][4] ), .DIN2(n51), .Q(n50) );
  nnd2s2 U87 ( .DIN1(\stored_partial_sums[0][0][5] ), .DIN2(n51), .Q(n52) );
  oai21s2 U88 ( .DIN1(n74), .DIN2(n63), .DIN3(n59), .Q(n92) );
  nnd2s2 U89 ( .DIN1(\stored_partial_sums[0][1][4] ), .DIN2(n61), .Q(n60) );
  oai21s2 U90 ( .DIN1(n76), .DIN2(n23), .DIN3(n60), .Q(n95) );
  nnd2s2 U91 ( .DIN1(\stored_partial_sums[0][1][5] ), .DIN2(n61), .Q(n62) );
  oai21s2 U92 ( .DIN1(n79), .DIN2(n23), .DIN3(n62), .Q(n98) );
  oai21s2 U93 ( .DIN1(n41), .DIN2(n64), .DIN3(n43), .Q(n66) );
  nnd2s2 U94 ( .DIN1(n24), .DIN2(n65), .Q(n80) );
  nnd2s2 U95 ( .DIN1(\stored_partial_sums[0][2][0] ), .DIN2(n77), .Q(n67) );
  oai21s2 U96 ( .DIN1(n80), .DIN2(n68), .DIN3(n67), .Q(n82) );
  nnd2s2 U97 ( .DIN1(\stored_partial_sums[0][2][1] ), .DIN2(n77), .Q(n69) );
  oai21s2 U98 ( .DIN1(n80), .DIN2(n70), .DIN3(n69), .Q(n85) );
  nnd2s2 U99 ( .DIN1(\stored_partial_sums[0][2][2] ), .DIN2(n77), .Q(n71) );
  oai21s2 U100 ( .DIN1(n80), .DIN2(n72), .DIN3(n71), .Q(n88) );
  nnd2s2 U101 ( .DIN1(\stored_partial_sums[0][2][3] ), .DIN2(n77), .Q(n73) );
  oai21s2 U102 ( .DIN1(n80), .DIN2(n74), .DIN3(n73), .Q(n91) );
  nnd2s2 U103 ( .DIN1(\stored_partial_sums[0][2][4] ), .DIN2(n77), .Q(n75) );
  oai21s2 U104 ( .DIN1(n80), .DIN2(n76), .DIN3(n75), .Q(n94) );
  nnd2s2 U105 ( .DIN1(\stored_partial_sums[0][2][5] ), .DIN2(n77), .Q(n78) );
  oai21s2 U106 ( .DIN1(n80), .DIN2(n79), .DIN3(n78), .Q(n97) );
endmodule


module index_counter ( clock, reset, enable, width_index, height_index );
  output [1:0] width_index;
  output [1:0] height_index;
  input clock, reset, enable;
  wire   n1, n2, n10, n11, n12, n13, n3, n4, n5, n6, n7, n8, n9, n14, n15, n16,
         n17;

  dffs2 \width_index_reg[0]  ( .DIN(n13), .CLK(clock), .Q(width_index[0]), 
        .QN(n2) );
  dffs2 \width_index_reg[1]  ( .DIN(n12), .CLK(clock), .Q(width_index[1]), 
        .QN(n1) );
  dffs2 \height_index_reg[0]  ( .DIN(n10), .CLK(clock), .Q(height_index[0]), 
        .QN(n4) );
  dffs2 \height_index_reg[1]  ( .DIN(n11), .CLK(clock), .Q(height_index[1]) );
  ib1s1 U3 ( .DIN(reset), .Q(n16) );
  and2s1 U4 ( .DIN1(n17), .DIN2(n16), .Q(n11) );
  aoi23s2 U5 ( .DIN3(n1), .DIN4(width_index[0]), .DIN5(n7), .DIN1(
        width_index[1]), .DIN2(n2), .Q(n14) );
  nor2s2 U6 ( .DIN1(n4), .DIN2(n15), .Q(n3) );
  oai21s2 U7 ( .DIN1(reset), .DIN2(n14), .DIN3(n9), .Q(n12) );
  hi1s1 U8 ( .DIN(enable), .Q(n5) );
  nnd2s1 U9 ( .DIN1(n16), .DIN2(n2), .Q(n6) );
  i1s1 U10 ( .DIN(n7), .Q(n8) );
  xor2s1 U11 ( .DIN1(height_index[1]), .DIN2(n3), .Q(n17) );
  nnd2s2 U12 ( .DIN1(n16), .DIN2(n5), .Q(n7) );
  mxi21s2 U13 ( .DIN1(n6), .DIN2(n2), .SIN(n8), .Q(n13) );
  nnd2s2 U14 ( .DIN1(n8), .DIN2(width_index[1]), .Q(n9) );
  nnd3s2 U15 ( .DIN1(width_index[1]), .DIN2(width_index[0]), .DIN3(enable), 
        .Q(n15) );
  aoi211s1 U16 ( .DIN1(n15), .DIN2(n4), .DIN3(reset), .DIN4(n3), .Q(n10) );
endmodule


module processing_unit ( clock, reset, start, input_req, input_val, 
        input_ready, .weight_vals({\weight_vals[1][1][5] , 
        \weight_vals[1][1][4] , \weight_vals[1][1][3] , \weight_vals[1][1][2] , 
        \weight_vals[1][1][1] , \weight_vals[1][1][0] , \weight_vals[1][0][5] , 
        \weight_vals[1][0][4] , \weight_vals[1][0][3] , \weight_vals[1][0][2] , 
        \weight_vals[1][0][1] , \weight_vals[1][0][0] , \weight_vals[0][1][5] , 
        \weight_vals[0][1][4] , \weight_vals[0][1][3] , \weight_vals[0][1][2] , 
        \weight_vals[0][1][1] , \weight_vals[0][1][0] , \weight_vals[0][0][5] , 
        \weight_vals[0][0][4] , \weight_vals[0][0][3] , \weight_vals[0][0][2] , 
        \weight_vals[0][0][1] , \weight_vals[0][0][0] }), output_val, 
        output_valid, done );
  input [5:0] input_val;
  output [5:0] output_val;
  input clock, reset, start, input_ready, \weight_vals[1][1][5] ,
         \weight_vals[1][1][4] , \weight_vals[1][1][3] ,
         \weight_vals[1][1][2] , \weight_vals[1][1][1] ,
         \weight_vals[1][1][0] , \weight_vals[1][0][5] ,
         \weight_vals[1][0][4] , \weight_vals[1][0][3] ,
         \weight_vals[1][0][2] , \weight_vals[1][0][1] ,
         \weight_vals[1][0][0] , \weight_vals[0][1][5] ,
         \weight_vals[0][1][4] , \weight_vals[0][1][3] ,
         \weight_vals[0][1][2] , \weight_vals[0][1][1] ,
         \weight_vals[0][1][0] , \weight_vals[0][0][5] ,
         \weight_vals[0][0][4] , \weight_vals[0][0][3] ,
         \weight_vals[0][0][2] , \weight_vals[0][0][1] ,
         \weight_vals[0][0][0] ;
  output input_req, output_valid, done;
  wire   zero_flag, down_counter_reset, down_counter_enable,
         FSM_selector_reset, FSM_selector_enable, PE_reset, PE_enable, PE_init,
         index_reset, index_enable, partial_sum_reset, partial_sum_enable,
         output_valid_tmp, _0_net_, _1_net_, zero_select, _3_net_,
         \init_vals[1][1][5] , \init_vals[1][1][4] , \init_vals[1][1][3] ,
         \init_vals[1][1][2] , \init_vals[1][1][1] , \init_vals[1][1][0] ,
         \init_vals[1][0][5] , \init_vals[1][0][4] , \init_vals[1][0][3] ,
         \init_vals[1][0][2] , \init_vals[1][0][1] , \init_vals[1][0][0] ,
         \init_vals[0][1][5] , \init_vals[0][1][4] , \init_vals[0][1][3] ,
         \init_vals[0][1][2] , \init_vals[0][1][1] , \init_vals[0][1][0] ,
         _7_net_, _8_net_, _13_net_, _18_net_, \store_vals[0][5] ,
         \store_vals[0][4] , \store_vals[0][3] , \store_vals[0][2] ,
         \store_vals[0][1] , \store_vals[0][0] , n8, n9, n10, n11, n12, n13,
         n14, n15, n16;
  wire   [1:0] width_index;
  wire   [1:0] height_index;
  wire   [2:0] selector;
  wire   SYNOPSYS_UNCONNECTED__0, SYNOPSYS_UNCONNECTED__1, 
        SYNOPSYS_UNCONNECTED__2, SYNOPSYS_UNCONNECTED__3, 
        SYNOPSYS_UNCONNECTED__4, SYNOPSYS_UNCONNECTED__5;

  controller controller_inst ( .clock(clock), .reset(reset), .start(start), 
        .input_ready(input_ready), .zero_flag(zero_flag), .width_index(
        width_index), .height_index(height_index), .down_counter_reset(
        down_counter_reset), .down_counter_enable(down_counter_enable), 
        .FSM_selector_reset(FSM_selector_reset), .FSM_selector_enable(
        FSM_selector_enable), .PE_reset(PE_reset), .PE_enable(PE_enable), 
        .PE_init(PE_init), .index_reset(index_reset), .index_enable(
        index_enable), .partial_sum_reset(partial_sum_reset), 
        .partial_sum_enable(partial_sum_enable), .output_valid(
        output_valid_tmp), .input_req(input_req), .done(done) );
  down_counter down_counter_inst ( .clock(clock), .reset(_0_net_), .enable(
        down_counter_enable), .count_init(input_val), .zero(zero_flag) );
  FSM_selector FSM_selector_inst ( .clock(clock), .reset(_1_net_), .enable(
        FSM_selector_enable), .zero_select(zero_select) );
  processing_element_3 \PE_row[0].PE_column[0].PEs  ( .clock(clock), .reset(
        _7_net_), .enable(_3_net_), .init(PE_init), .selector({1'b1, 1'b0, 
        1'b1}), .zero_select(zero_select), .init_val({1'b0, 1'b0, 1'b0, 1'b0, 
        1'b0, 1'b0}), .weight_val({\weight_vals[0][0][5] , 
        \weight_vals[0][0][4] , \weight_vals[0][0][3] , \weight_vals[0][0][2] , 
        \weight_vals[0][0][1] , \weight_vals[0][0][0] }), .output_val({
        \init_vals[0][1][5] , \init_vals[0][1][4] , \init_vals[0][1][3] , 
        \init_vals[0][1][2] , \init_vals[0][1][1] , \init_vals[0][1][0] }) );
  processing_element_2 \PE_row[0].PE_column[1].PEs  ( .clock(clock), .reset(n8), .enable(_8_net_), .init(PE_init), .selector({1'b1, 1'b0, 1'b1}), 
        .zero_select(zero_select), .init_val({\init_vals[0][1][5] , 
        \init_vals[0][1][4] , \init_vals[0][1][3] , \init_vals[0][1][2] , 
        \init_vals[0][1][1] , \init_vals[0][1][0] }), .weight_val({
        \weight_vals[0][1][5] , \weight_vals[0][1][4] , \weight_vals[0][1][3] , 
        \weight_vals[0][1][2] , \weight_vals[0][1][1] , \weight_vals[0][1][0] }), .output_val({\store_vals[0][5] , \store_vals[0][4] , \store_vals[0][3] , 
        \store_vals[0][2] , \store_vals[0][1] , \store_vals[0][0] }) );
  processing_element_1 \PE_row[1].PE_column[0].PEs  ( .clock(clock), .reset(n8), .enable(_13_net_), .init(PE_init), .selector({1'b1, 1'b0, 1'b1}), 
        .zero_select(zero_select), .init_val({\init_vals[1][0][5] , 
        \init_vals[1][0][4] , \init_vals[1][0][3] , \init_vals[1][0][2] , 
        \init_vals[1][0][1] , \init_vals[1][0][0] }), .weight_val({
        \weight_vals[1][0][5] , \weight_vals[1][0][4] , \weight_vals[1][0][3] , 
        \weight_vals[1][0][2] , \weight_vals[1][0][1] , \weight_vals[1][0][0] }), .output_val({\init_vals[1][1][5] , \init_vals[1][1][4] , 
        \init_vals[1][1][3] , \init_vals[1][1][2] , \init_vals[1][1][1] , 
        \init_vals[1][1][0] }) );
  processing_element_0 \PE_row[1].PE_column[1].PEs  ( .clock(clock), .reset(
        _7_net_), .enable(_18_net_), .init(PE_init), .selector({1'b1, 1'b0, 
        1'b1}), .zero_select(zero_select), .init_val({\init_vals[1][1][5] , 
        \init_vals[1][1][4] , \init_vals[1][1][3] , \init_vals[1][1][2] , 
        \init_vals[1][1][1] , \init_vals[1][1][0] }), .weight_val({
        \weight_vals[1][1][5] , \weight_vals[1][1][4] , \weight_vals[1][1][3] , 
        \weight_vals[1][1][2] , \weight_vals[1][1][1] , \weight_vals[1][1][0] }), .output_val(output_val) );
  partial_result_buffer partial_result_buffer_inst ( .clock(clock), .reset(
        partial_sum_reset), .enable(partial_sum_enable), .store_vals({
        output_val, \store_vals[0][5] , \store_vals[0][4] , \store_vals[0][3] , 
        \store_vals[0][2] , \store_vals[0][1] , \store_vals[0][0] }), 
        .width_index(width_index), .fetch_vals({\init_vals[1][0][5] , 
        \init_vals[1][0][4] , \init_vals[1][0][3] , \init_vals[1][0][2] , 
        \init_vals[1][0][1] , \init_vals[1][0][0] , SYNOPSYS_UNCONNECTED__0, 
        SYNOPSYS_UNCONNECTED__1, SYNOPSYS_UNCONNECTED__2, 
        SYNOPSYS_UNCONNECTED__3, SYNOPSYS_UNCONNECTED__4, 
        SYNOPSYS_UNCONNECTED__5}) );
  index_counter index_counter_inst ( .clock(clock), .reset(index_reset), 
        .enable(index_enable), .width_index(width_index), .height_index(
        height_index) );
  or2s2 U18 ( .DIN1(down_counter_reset), .DIN2(reset), .Q(_0_net_) );
  ib1s1 U19 ( .DIN(height_index[0]), .Q(n13) );
  or2s3 U20 ( .DIN1(reset), .DIN2(PE_reset), .Q(n8) );
  and2s2 U21 ( .DIN1(n10), .DIN2(n16), .Q(_18_net_) );
  and2s2 U22 ( .DIN1(n10), .DIN2(n14), .Q(_13_net_) );
  and2s2 U23 ( .DIN1(PE_enable), .DIN2(n15), .Q(n10) );
  and2s2 U24 ( .DIN1(n9), .DIN2(n14), .Q(_3_net_) );
  and2s2 U25 ( .DIN1(n9), .DIN2(n16), .Q(_8_net_) );
  and2s2 U26 ( .DIN1(n11), .DIN2(PE_enable), .Q(n9) );
  or2s1 U27 ( .DIN1(FSM_selector_reset), .DIN2(reset), .Q(_1_net_) );
  or2s1 U28 ( .DIN1(width_index[0]), .DIN2(width_index[1]), .Q(n16) );
  and3s1 U29 ( .DIN1(n15), .DIN2(n16), .DIN3(output_valid_tmp), .Q(
        output_valid) );
  ib1s1 U30 ( .DIN(height_index[1]), .Q(n12) );
  or2s1 U31 ( .DIN1(n13), .DIN2(n12), .Q(n11) );
  or2s3 U32 ( .DIN1(reset), .DIN2(PE_reset), .Q(_7_net_) );
  nnd2s2 U33 ( .DIN1(n13), .DIN2(n12), .Q(n15) );
  nnd2s2 U34 ( .DIN1(width_index[1]), .DIN2(width_index[0]), .Q(n14) );
endmodule

